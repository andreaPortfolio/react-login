{
  "version": 3,
  "sources": [
    "index.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "index-compiled.js",
  "sourcesContent": [
    "// actions.js\n\n// There are three possible states for our login\n// process and we need actions for each of them\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\n\nfunction requestLogin(creds) {\n  return {\n    type: LOGIN_REQUEST,\n    isFetching: true,\n    isAuthenticated: false,\n    creds\n  }\n}\n\nfunction receiveLogin(user) {\n  return {\n    type: LOGIN_SUCCESS,\n    isFetching: false,\n    isAuthenticated: true,\n    id_token: user.id_token\n  }\n}\n\nfunction loginError(message) {\n  return {\n    type: LOGIN_FAILURE,\n    isFetching: false,\n    isAuthenticated: false,\n    message\n  }\n}\n\n// Three possible states for our logout process as well.\n// Since we are using JWTs, we just need to remove the token\n// from localStorage. These actions are more useful if we\n// were calling the API to log the user out\nexport const LOGOUT_REQUEST = 'LOGOUT_REQUEST';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n\nfunction requestLogout() {\n  return {\n    type: LOGOUT_REQUEST,\n    isFetching: true,\n    isAuthenticated: true\n  }\n}\n\nfunction receiveLogout() {\n  return {\n    type: LOGOUT_SUCCESS,\n    isFetching: false,\n    isAuthenticated: false\n  }\n}\n\n// Calls the API to get a token and\n// dispatches actions along the way\nexport function loginUser(creds) {\n\n  let config = {\n    method: 'POST',\n    headers: { 'Content-Type':'application/x-www-form-urlencoded' },\n    body: `username=${creds.username}&password=${creds.password}`\n  }\n\n  return dispatch => {\n    // We dispatch requestLogin to kickoff the call to the API\n    dispatch(requestLogin(creds))\n    return fetch('http://localhost:3001/sessions/create', config)\n        .then(response =>\n            response.json()\n                .then(user => ({ user, response }))\n        ).then(({ user, response }) =>  {\n          if (!response.ok) {\n            // If there was a problem, we want to\n            // dispatch the error condition\n            dispatch(loginError(user.message))\n            return Promise.reject(user)\n          }\n          else {\n            // If login was successful, set the token in local storage\n            localStorage.setItem('id_token', user.id_token)\n\n            // Dispatch the success action\n            dispatch(receiveLogin(user))\n          }\n        }).catch(err => console.log(\"Error: \", err))\n  }\n}\n\n// Logs the user out\nexport function logoutUser() {\n  return dispatch => {\n    dispatch(requestLogout())\n    localStorage.removeItem('id_token')\n    dispatch(receiveLogout())\n  }\n}\n//We also have actions for retreiving the quotes that uses an API middleware.\n\n// middleware/api.js\n\n    const BASE_URL = 'http://localhost:3001/api/'\n\nfunction callApi(endpoint, authenticated) {\n\n  let token = localStorage.getItem('id_token') || null\n  let config = {}\n\n  if(authenticated) {\n    if(token) {\n      config = {\n        headers: { 'Authorization': `Bearer ${token}` }\n      }\n    } else {\n      throw \"No token saved!\"\n    }\n  }\n\n  return fetch(BASE_URL + endpoint, config)\n      .then(response =>\n          response.text()\n              .then(text => ({ text, response }))\n      ).then(({ text, response }) => {\n        if (!response.ok) {\n          return Promise.reject(text)\n        }\n\n        return text\n      }).catch(err => console.log(err))\n}\n\nexport const CALL_API = Symbol('Call API')\n\nexport default store => next => action => {\n\n  const callAPI = action[CALL_API]\n\n  // So the middleware doesn't get applied to every single action\n  if (typeof callAPI === 'undefined') {\n    return next(action)\n  }\n\n  let { endpoint, types, authenticated } = callAPI\n\n  const [ requestType, successType, errorType ] = types\n\n  // Passing the authenticated boolean back in our data will let us distinguish between normal and secret quotes\n  return callApi(endpoint, authenticated).then(\n      response =>\n          next({\n            response,\n            authenticated,\n            type: successType\n          }),\n      error => next({\n        error: error.message || 'There was an error.',\n        type: errorType\n      })\n  )\n}\n// actions.js\n\n// Uses the API middlware to get a quote\nexport function fetchQuote() {\n  return {\n    [CALL_API]: {\n      endpoint: 'random-quote',\n      types: [QUOTE_REQUEST, QUOTE_SUCCESS, QUOTE_FAILURE]\n    }\n  }\n}\n\n// Same API middlware is used to get a\n// secret quote, but we set authenticated\n// to true so that the auth header is sent\nexport function fetchSecretQuote() {\n  return {\n    [CALL_API]: {\n      endpoint: 'protected/random-quote',\n      authenticated: true,\n      types: [QUOTE_REQUEST, QUOTE_SUCCESS, QUOTE_FAILURE]\n    }\n  }\n}\n"
  ]
}
